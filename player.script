local pos
local anim
local anim_torch
local instance


function init(self)
	msg.post(".", "acquire_input_focus")
	
	self.dir = vmath.vector3()
	self.input = vmath.vector3()
	self.speed = 150
	self.moving = false
	self.animation = nil
	self.state = vmath.vector3()
	interact = false
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	if self.moving == true then	
		pos = go.get_position() -- gets go position
		pos = pos + self.dir * self.speed * dt -- defines new position based on speed/dt/direction/current position
		go.set_position(pos) -- applies new position

		if self.state.x > 0 then --if the recorded direction of player is right
			anim = hash("right movement") -- set right animation
		elseif self.state.x < 0 then
			anim = hash("left movement")
		end
		
	elseif self.moving == false then
		if self.state.x == 1 then -- if the player is pointing right
			anim = hash("idle right") -- play idle right animation
		elseif self.state.x == -1 then
			anim = hash("idle left")
		end
	end
		

	if anim ~= self.animation then -- if the current animation is different from new animation
		msg.post("#player", "play_animation", { id = anim }) -- tell engine to play new animation
		self.animation = anim -- set current animation to new animation
	end
	
	self.input.y = 0
	self.input.x = 0
	self.moving = false
	print(interact)
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.input.y = 1
		self.state.y = 1
	elseif action_id == hash("down") then
		self.input.y = -1
		self.state.y = -1
	elseif action_id == hash("right") then
		self.input.x = 1
		self.state.x = 1
	elseif action_id == hash("left") then
		self.input.x = -1
		self.state.x = -1
	end

	if action_id == hash("interact") and action.released then
		interact = true
		print("INTERACT = TRUE")
	end
	
	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input) --normalizes input vector to allow for equal movement speeds
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash('contact_point_response') then
		go.set_position(go.get_position() + message.normal * message.distance)
	end
end